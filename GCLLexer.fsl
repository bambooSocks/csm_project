{
module GCLLexer
open FSharp.Text.Lexing
open System
open GCLParser
}

let vars        = ['a'-'z''A'-'Z']['a'-'z''A'-'Z'\d_]*
let num         = \d+
let whitespace  = [' ' '\t' '\n' '\r']
let newline     = "\n\r" | '\n' | '\r'

rule tokenize = parse
| "if"          { IF }
| "fi"          { FI }
| "do"          { DO }
| "od"          { OD }
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
| ":="          { ASSIGN }
| vars          { VAR }
| ';'           { CMDSEQ }
| "->"          { ARROW }
| "[]"          { GCSEQ }
| '['           { LBRAC }
| ']'           { RBRAC }
| "skip"        { SKIP }
| "true"        { TRUE }
| "false"       { FALSE }
| "&&"          { SHORTAND }
| "||"          { SHORTOR }
| '&'           { AND }
| '|'           { OR }
| "!="          { NEQ }
| ">="          { GTE }
| "<="          { LTE }
| '!'           { NOT }
| '='           { EQ }
| '<'           { LT }
| '>'           { GT }
| num           { NUM(Integer.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| '*'           { MUL }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| eof           { EOF }
